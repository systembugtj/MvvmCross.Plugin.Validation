<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvvmCross.Plugin.Messenger</name>
    </assembly>
    <members>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.Subscribe``1(System.Action{``0},MvvmCross.Plugin.Messenger.MvxReference,System.String)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="reference">Use a strong or weak reference to the deliveryAction</param>
            <param name="tag">An optional tag to include with this subscription</param>
            <returns>MessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.SubscribeOnMainThread``1(System.Action{``0},MvvmCross.Plugin.Messenger.MvxReference,System.String)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            This subscription always invokes the delivery Action on the Main thread.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="reference">Use a strong or weak reference to the deliveryAction</param>
            <param name="tag">An optional tag to include with this subscription</param>
            <returns>MessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.SubscribeOnThreadPoolThread``1(System.Action{``0},MvvmCross.Plugin.Messenger.MvxReference,System.String)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            This subscription always invokes the delivery Action called on a threadpool thread.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="reference">Use a strong or weak reference to the deliveryAction</param>
            <param name="tag">An optional tag to include with this subscription</param>
            <returns>MessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.Unsubscribe``1(MvvmCross.Plugin.Messenger.MvxSubscriptionToken)">
            <summary>
            Unsubscribe from a particular message type.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="mvxSubscriptionId">Subscription to remove</param>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.HasSubscriptionsFor``1">
            <summary>
            Has subscriptions for TMessage
            </summary>
            <typeparam name="TMessage"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.CountSubscriptionsFor``1">
            <summary>
            Number of subscriptions for TMessage
            </summary>
            <typeparam name="TMessage"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.HasSubscriptionsForTag``1(System.String)">
            <summary>
            Has subscriptions for TMessage with a tag value of tag
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="tag">An optional tag to include with this subscription</param>
            <returns></returns>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.CountSubscriptionsForTag``1(System.String)">
            <summary>
            Number of subscriptions for TMessage with a tag value of tag
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="tag">An optional tag to include with this subscription</param>
            <returns></returns>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.GetSubscriptionTagsFor``1">
            <summary>
            Get all the tags (including nulls) for subscriptions for TMessage
            </summary>
            <typeparam name="TMessage"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.Publish``1(``0)">
            <summary>
            Publish a message to any subscribers
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.Publish(MvvmCross.Plugin.Messenger.MvxMessage)">
            <summary>
            Publish a message to any subscribers
            - GetType() will be used to determine the message type
            </summary>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.Publish(MvvmCross.Plugin.Messenger.MvxMessage,System.Type)">
            <summary>
            Publish a message to any subscribers
            </summary>
            <param name="message">Message to deliver</param>
            <param name="messageType">The type of the message to use for delivery - message should be of that class or a of a subclass</param>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.RequestPurge(System.Type)">
            <summary>
            Schedules a check on all subscribers for the specified messageType. If any are not alive, they will be removed
            </summary>
            <param name="messageType">The type of the message to check</param>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.IMvxMessenger.RequestPurgeAll">
            <summary>
            Schedules a check on all subscribers for all messageType. If any are not alive, they will be removed
            </summary>
        </member>
        <member name="T:MvvmCross.Plugin.Messenger.MvxMessage">
            <summary>
            Base class for messages that provides weak refrence storage of the sender
            </summary>
        </member>
        <member name="P:MvvmCross.Plugin.Messenger.MvxMessage.Sender">
            <summary>
            Gets the original sender of the message
            </summary>
        </member>
        <member name="M:MvvmCross.Plugin.Messenger.MvxMessage.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MvxMessage class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
        </member>
    </members>
</doc>
